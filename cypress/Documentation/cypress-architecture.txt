#Cypress Architecture

Selenium Architecture - Operated by running outside of the browser so forexample:
 if you run a selenium tests, You need a driver or server like chrome driver. Script will talk
 the browser by Json wire protocol - the driver is the middle layer between the browser
 and the scripts. 

 Cypress Architecture - Cypress directly talk the browser - the code execute in the same loops
 as the application and behind cypress is a node server process.
 Cypress and node will communicate and synchronize and perform tasks in behave each others
 Cypress also operated in the Network Layer by reading and alterate network traffic.
 This enabled cypress to not only modify everything coming at out of the browser but 
 also changed code that made to automate the browser.

 Why Cypress?

 It is popular.
 Most Job adverts will emntion cypress
 Strong community huge weekly download on npm 
 Rapid improvements -Cypress have a team behind them fully focused on 
 making huge improvements


 -Powerful tooling
 -Really simple UI
 -Debug from tools you already know
 -Dashboard services for CI tests
 -Cypress API makes everything easier


 -Resilient and Reliable tests
 -Automatic waiting
 -Flake reisitant


 DrawBacks:

 .Cypress openly admit there are some trade offs due to its Architecture
 .Limited to TypeScript and Javascript 
    -- Permanent trade offs
    -- Temporary trade offs


************************

Cypress
- e2e - test location
- fixture - test data 
- Suport folder - 
               - e2e.js - config before your test run 
               - commands.js where we have our custom command
*************************

Execute a group of tests: Sanity - Functional and regression / full-regression
intallation : npm i cypress-grep
run test: npx cypress run --env grep = tags@name


tags: npx cypress run --spec cypress/e2e/tags/*.js --env grep = "regression"

-- Handled uncaught exception {failOnStatusCode:false} or Cypress.on('uncaught:exception', (err, runnable) => {return false;})

Runs Cypress tests from the CLI without the GUI

Options:
  --auto-cancel-after-failures <test-failure-count || false>  overrides the project-level Cloud configuration to set the 
                                                              failed test threshold for auto cancellation or to disable  
                                                              auto cancellation when recording to the Cloud
  -b, --browser <browser-name-or-path>                        runs Cypress in the browser with the given name. if a      
                                                              filesystem path is supplied, Cypress will attempt to use   
                                                              the browser at that path.
  --ci-build-id <id>                                          the unique identifier for a run on your CI provider.       
                                                              typically a "BUILD_ID" env var. this value is
                                                              automatically detected for most CI providers
  --component                                                 runs component tests
  -c, --config <config>                                       sets configuration values. separate multiple values with a 
                                                              comma. overrides any value in
                                                              cypress.config.{js,ts,mjs,cjs}.
  -C, --config-file <config-file>                             path to script file where configuration values are set.    
                                                              defaults to "cypress.config.{js,ts,mjs,cjs}".
  --e2e                                                       runs end to end tests
  -e, --env <env>                                             sets environment variables. separate multiple values with  
                                                              a comma. overrides any value in
                                                              cypress.config.{js,ts,mjs,cjs} or cypress.env.json
  --group <name>                                              a named group for recorded runs in Cypress Cloud
  -k, --key <record-key>                                      your secret Record Key. you can omit this if you set a     
                                                              CYPRESS_RECORD_KEY environment variable.
  --headed                                                    displays the browser instead of running headlessly
  --headless                                                  hide the browser instead of running headed (default for    
                                                              cypress run)
  --no-exit                                                   keep the browser open after tests finish
  --parallel                                                  enables concurrent runs and automatic load balancing of    
                                                              specs across multiple machines or processes
  -p, --port <port>                                           runs Cypress on a specific port. overrides any value in    
                                                              cypress.config.{js,ts,mjs,cjs}.
  -P, --project <project-path>                                path to the project
  -q, --quiet                                                 run quietly, using only the configured reporter
  --record [bool]                                             records the run. sends test results, screenshots and       
                                                              videos to Cypress Cloud.
  -r, --reporter <reporter>                                   runs a specific mocha reporter. pass a path to use a       
                                                              custom reporter. defaults to "spec"
  -o, --reporter-options <reporter-options>                   options for the mocha reporter. defaults to "null"
  -s, --spec <spec>                                           runs specific spec file(s). defaults to "all"
  -t, --tag <tag>                                             named tag(s) for recorded runs in Cypress Cloud
  --dev                                                       runs cypress in development and bypasses binary check      
  -h, --help                                                  display help for command


  ***************JENKINS CONFIGURATION************************

  1-Fetch cypress project from github, run and publish mochawesome html reports
  a. Create a freestyle project
  b. In General, select GitHub project: URL repo
      - click advanced button, select "Use custom workspace" and mention the project directory, for example 
         C:/Cypress-jenkins/GitHub
  c. Go to source Code Management, select git 
        set
        Repositories ===> Repository URL: GitHub
  d.Go to build, Click on add build step, select "Execution Window Batch" and add "npm install && npm test"
  e. Go to Post-build Actions, Click on add post-build action, select "Publish HTML reports",

     Install PUBLISH HTML REPORT plugin(https://plugins.jenkins.io/htmlpublisher/), if not already development

     set
        HTML directly to archieve: cypress/reports/mochareports
        Index pages[s] = reports.html

3. Run Cypress Tests presents locally and build project with parameters
    
    

pipeline {
	agent any

   parameters {
		
			string(name: 'SPEC', defaultValue: 'cypress/e2e/**/**', description:'Enter the scripts path that you want execute')
            choice(name:'BROWSER',choices: ['chrome', 'edge','firefox'], description: 'choise the browser where you want to tun test')
	}
	stages {
		stage('Clone Git Repo'){
				steps{
					git 'https://github.com/taili87/cypress-e2e.git'
		    }
		}
		stage('Install Dependencies'){
				steps{
					bat 'npm install'
				}
		}
		stage('Run Tests'){
				steps{
					bat 'npm test'
				}
		}
		stage('Publish HTML Report'){
				steps{
					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'cypress/reports/', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
				}
		}
	}
}

-------------------------------------------------------------------

			post{
				always {
					publishHTML([allowMissing: false, 
					alwaysLinkToLastBuild: false,
					 keepAll: true, 
					 reportDir: 'cypress/reports/', 
					 reportFiles: 'index.html', 
					 reportName: 'HTML Report', 
					 reportTitles: ''])
				}
			}

         stage('Publish HTML Report'){
				steps{
					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'cypress/reports/', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
				}
		}